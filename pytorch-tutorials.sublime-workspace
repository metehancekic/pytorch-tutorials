{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Pre",
				"PreActBlock"
			],
			[
				"one_",
				"one_hot_targets"
			],
			[
				"o",
				"one_hot_targets"
			],
			[
				"num",
				"num_classes"
			],
			[
				"para",
				"parallel_layers"
			],
			[
				"in",
				"input_size"
			],
			[
				"chec",
				"checkpoint_name"
			],
			[
				"ce",
				"checkpoint_name"
			],
			[
				"m",
				"num_modes"
			],
			[
				"ob",
				"obtain_residuals"
			],
			[
				"experim",
				"experiment_setup"
			],
			[
				"eq",
				"equalize_test"
			],
			[
				"fo",
				"found_new_signal"
			],
			[
				"sig",
				"signal_len"
			],
			[
				"if",
				"ifmain\tif __name__ == '__main__'"
			],
			[
				"che",
				"Checkpoint"
			],
			[
				"save",
				"save_dataset"
			],
			[
				"snr",
				"snr_test"
			],
			[
				"signals",
				"signals_train"
			],
			[
				"labe",
				"labels_train"
			],
			[
				"sign",
				"signals_test"
			],
			[
				"db",
				"db_to_pow"
			],
			[
				"pre",
				"preamble_per_device"
			],
			[
				"fr",
				"freq_bins"
			],
			[
				"freq",
				"freq_blocks"
			],
			[
				"fre",
				"freq_blocks"
			],
			[
				"bloc",
				"block_len"
			],
			[
				"blo",
				"block_len"
			],
			[
				"oversam",
				"oversampling_rate"
			],
			[
				"over",
				"oversampling_rate"
			],
			[
				"test",
				"test_fold"
			],
			[
				"x",
				"x_folds"
			],
			[
				"datal",
				"dataloader"
			],
			[
				"PG",
				"PGD_EOT_sign"
			],
			[
				"seco",
				"second_direction"
			],
			[
				"data",
				"dataset"
			],
			[
				"z",
				"z_axis"
			],
			[
				"single",
				"single_label"
			],
			[
				"lo",
				"loss_landscape_args"
			],
			[
				"loss",
				"loss_landscape"
			],
			[
				"tor",
				"torchattacks"
			],
			[
				"whi",
				"whitebox_test"
			],
			[
				"los",
				"loss_function"
			],
			[
				"att",
				"attack_args"
			],
			[
				"atta",
				"attack_args"
			],
			[
				"PGD_",
				"PGD_EOT_sign"
			],
			[
				"PGD",
				"PGD_EOT_normalized"
			],
			[
				"BIM",
				"BIM_EOT"
			],
			[
				"FG",
				"FGSM_targeted"
			],
			[
				"to_",
				"to_one_hot"
			],
			[
				"adversa",
				"adversarial_test"
			],
			[
				"ad",
				"adversarial_test"
			],
			[
				"adver",
				"adversarial_epoch"
			],
			[
				"prog",
				"progress_bar"
			],
			[
				"attack",
				"attack_args"
			],
			[
				"trai",
				"train_loader"
			],
			[
				"ep",
				"epsilon"
			],
			[
				"de",
				"deepillusion"
			],
			[
				"iter",
				"iterative_soft_attack"
			],
			[
				"pertu",
				"perturbation_dict"
			],
			[
				"per",
				"percent_images_attacked"
			],
			[
				"di",
				"difference"
			],
			[
				"ma",
				"max_pool2d"
			],
			[
				"No",
				"NotImplementedError"
			],
			[
				"dist",
				"dist_correct"
			],
			[
				"re",
				"requires_grad"
			],
			[
				"adv",
				"adversarial"
			],
			[
				"datA",
				"data_params"
			],
			[
				"dis",
				"distortions"
			],
			[
				"Fo",
				"FourthLayer"
			],
			[
				"bias",
				"bias_scalar"
			],
			[
				"path",
				"patchsize"
			],
			[
				"get",
				"get_arguments"
			],
			[
				"plot",
				"plot_filters"
			],
			[
				"batch_s",
				"test_batch_size"
			],
			[
				"x_",
				"x_min"
			],
			[
				"rand",
				"rand_perturb"
			],
			[
				"random",
				"random_start"
			],
			[
				"step",
				"step_size"
			],
			[
				"pert",
				"perturbation"
			],
			[
				"mod",
				"modReLU1"
			],
			[
				"comp",
				"comp_conv1"
			],
			[
				"Ltf",
				"Ltf_interpolated"
			],
			[
				"ifft",
				"ifftshift"
			],
			[
				"plt",
				"plt"
			],
			[
				"keep",
				"keep_orig_test_cfo"
			],
			[
				"df",
				"df_aug_train"
			],
			[
				"aug_type",
				"aug_type_cfo"
			],
			[
				"dict",
				"dict_wifi_no_aug"
			],
			[
				"augm",
				"augment_cfo"
			],
			[
				"ex",
				"exp_i"
			],
			[
				"exp",
				"experiment_setup"
			],
			[
				"seed_",
				"seed_test_day"
			],
			[
				"seed_test",
				"seed_test_day"
			],
			[
				"angles_em",
				"angles_embed_avg"
			],
			[
				"layer",
				"layer_ord"
			],
			[
				"tem",
				"temporal_index"
			],
			[
				"ac",
				"activation_count"
			],
			[
				"au",
				"augment_with_channel"
			],
			[
				"sam",
				"sampling_rate"
			],
			[
				"seed_au",
				"seed_aug_cfo"
			],
			[
				"ver",
				"verbose_train"
			],
			[
				"wifi",
				"dict_wifi"
			],
			[
				"features",
				"features_test_classes"
			],
			[
				"x_tes",
				"x_test_classes"
			],
			[
				"train",
				"training-eps"
			],
			[
				"def",
				"def_id"
			],
			[
				"arch",
				"architecture"
			],
			[
				"im",
				"img_input"
			],
			[
				"cl",
				"clip_max"
			],
			[
				"clip",
				"clip_min"
			],
			[
				"mul",
				"multiple_day_fingerprint"
			],
			[
				"augme",
				"augment_channel"
			],
			[
				"num_au",
				"num_aug_train"
			],
			[
				"clas",
				"class_indices"
			],
			[
				"decay",
				"decay_rate"
			],
			[
				"signal_faded_",
				"signal_faded_cfo"
			],
			[
				"signal",
				"signal_eq"
			],
			[
				"biddi",
				"bidding_dict"
			],
			[
				"who",
				"who_can_bid"
			],
			[
				"who_",
				"who_offered"
			],
			[
				"y_train",
				"y_train_aug"
			],
			[
				"x_t",
				"x_train_aug"
			],
			[
				"com",
				"complex_train"
			],
			[
				"y_",
				"y_test_orig"
			],
			[
				"y_t",
				"y_train_orig"
			],
			[
				"x_tra",
				"x_train_orig"
			],
			[
				"nu",
				"num_aug_train"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				"XeLaTeX"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"package",
				"Preferences: Package Control Settings â€“ User"
			],
			[
				"rai",
				"RainbowBrackets: tinct view"
			],
			[
				"",
				"AutoPEP8: Preview Changes"
			],
			[
				"pac",
				"Preferences: RainbowBrackets Settings"
			],
			[
				"reload",
				"LiveReload: Self test"
			],
			[
				"ma",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Package Control: Install Package",
				"Package Control: Install Package"
			],
			[
				"markdo",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Install",
				"Package Control: Install Package"
			],
			[
				"markd",
				"Set Syntax: Markdown"
			],
			[
				"subl",
				"Preferences: SublimeLinter Settings"
			],
			[
				"sublime",
				"Preferences: SublimeLinter Settings"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: List Packages"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 421.0,
		"history":
		[
			"done",
			"install package",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/metehan/Desktop/lab/pytorch-tutorials"
	],
	"file_history":
	[
		"/Users/metehan/Google Drive/MCekic/CodingTutorials/Algorithms/PythonDataStructures/circular_queue.py",
		"/Users/metehan/Desktop/lab/pytorch-tutorials/imagenette/parameters.py",
		"/Users/metehan/Desktop/lab/pytorch-tutorials/models/mobilenet.py",
		"/Users/metehan/Desktop/lab/pytorch-tutorials/models/mobilenetv2.py",
		"/Users/metehan/Desktop/lab/pytorch-tutorials/models/resnet.py",
		"/Users/metehan/Desktop/lab/pytorch-tutorials/models/vgg.py",
		"/Users/metehan/Desktop/lab/pytorch-tutorials/models/attention_models.py",
		"/Users/metehan/Desktop/lab/pytorch-tutorials/models/__init__.py",
		"/Users/metehan/Desktop/lab/pytorch-tutorials/imagenette/train_test.py",
		"/Users/metehan/Desktop/lab/pytorch-tutorials/imagenette/read_datasets.py",
		"/Users/metehan/Desktop/lab/pytorch-tutorials/CIFAR10/parameters.py",
		"/Users/metehan/Desktop/adv/NeurISP/src/train_classifier.py",
		"/Users/metehan/Desktop/adv/NeurISP/src/models/resnet.py",
		"/Users/metehan/Desktop/adv/NeurISP/src/utils/read_datasets.py",
		"/Users/metehan/Desktop/adv/NeurISP/src/train_test_functions.py",
		"/Users/metehan/Google Drive/github-repos/PyTorchTutorial/CIFAR10/models/tools.py",
		"/Users/metehan/Google Drive/github-repos/PyTorchTutorial/CIFAR10/models/readme.md",
		"/Users/metehan/Google Drive/github-repos/PyTorchTutorial/CIFAR10/main.py",
		"/Users/metehan/Google Drive/github-repos/PyTorchTutorial/.gitignore",
		"/Users/metehan/Desktop/lab/attention_cnn/CIFAR10/models/tools.py",
		"/Users/metehan/Desktop/lab/attention_cnn/CIFAR10/models/resnet.py",
		"/Users/metehan/Desktop/lab/attention_cnn/.gitignore.exclude",
		"/Users/metehan/Desktop/lab/attention_cnn/CIFAR10/main.py",
		"/Users/metehan/Desktop/lab/attention_cnn/CIFAR10/parameters.py",
		"/Users/metehan/Desktop/lab/deep_noise_rejection/CIFAR10/models/resnet_new.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/__init__.py",
		"/Users/metehan/Desktop/lab/attention_cnn/CIFAR10/models/__init__.py",
		"/Users/metehan/Desktop/lab/attention_cnn/cifar_main.sh",
		"/Users/metehan/Desktop/adv/nips2020/src/shell_scripts/run_all.sh",
		"/Users/metehan/Desktop/adv/nips2020/src/shell_scripts/run_PGD.sh",
		"/Users/metehan/Desktop/lab/deep_noise_rejection/MNIST/main.py",
		"/Users/metehan/Desktop/lab/attention_cnn/AttentionLayer.py",
		"/Users/metehan/Desktop/lab/deep_noise_rejection/CIFAR10/models/resnet.py",
		"/Users/metehan/Desktop/seq2seq_translation/main.py",
		"/Users/metehan/Google Drive/MCekic/Career_PHD/resume/resume_2.tex",
		"/Users/metehan/Google Drive/MCekic/CodingTutorials/Algorithms/PythonDataStructures/bit_operations.py",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/readme.md",
		"/Users/metehan/Google Drive/readme.md",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/sec_5abcd_scripts/readme.md",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/tests/test_aug_analysis.py",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/fingerprint_wifi_reim_mag.py",
		"/Users/metehan/Desktop/intro.tex",
		"/Users/metehan/Desktop/wifi_preamble.py",
		"/Users/metehan/Desktop/utils.py",
		"/Users/metehan/Desktop/results_sup.py",
		"/Users/metehan/Desktop/oteberi/train_rfml.py",
		"/Users/metehan/Desktop/oteberi/melihsah/triangle.py",
		"/Users/metehan/Desktop/oteberi/ekiz.py",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/experiment_setup.py",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/configs_train.json",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/simulators.py",
		"/Users/metehan/Desktop/arinc/pyt_wrkplc/Aligner.py",
		"/Users/metehan/Desktop/arinc/pyt_wrkplc/Estimator.py",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/requirements.txt",
		"/Users/metehan/Google Drive/UCSB/Research/RFML/wireless-fingerprinting/build_environment.sh",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/test_simulations.sh",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/build_environment.sh",
		"/Users/metehan/Google Drive/UCSB/Research/RFML/wireless-fingerprinting/wireless-fingerprinting/cfo_channel_training_simulations.py",
		"/Users/metehan/Google Drive/UCSB/Research/RFML/wireless-fingerprinting/wireless-fingerprinting/cxnn/train.py",
		"/Users/metehan/Google Drive/UCSB/Research/RFML/wireless-fingerprinting/wireless-fingerprinting/cxnn/models.py",
		"/Users/metehan/Google Drive/UCSB/Research/RFML/wireless-fingerprinting/wireless-fingerprinting/cpu_test.py",
		"/Users/metehan/Google Drive/UCSB/Research/RFML/wireless-fingerprinting/wireless-fingerprinting/fingerprint_wifi_reim_mag.py",
		"/Users/metehan/Google Drive/UCSB/Research/RFML/wireless-fingerprinting/.gitattributes",
		"/Users/metehan/Google Drive/UCSB/Research/RFML/wireless-fingerprinting/.gitignore",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/configs_test.json",
		"/Users/metehan/Desktop/RFML/wifi-rebuttal/wifi-fingerprinting-journal/cxnn/train.py",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/.gitignore",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/train_simulations.sh",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/train_kfold.sh",
		"/Users/metehan/Dropbox/RFML/Journal-revision/references.bib",
		"/Users/metehan/Dropbox/RFML/Journal-revision/supp.tex",
		"/Users/metehan/Google Drive/RFML/Journal/supp.tex",
		"/Users/metehan/Dropbox/RFML/Journal-revision/ack.tex",
		"/Users/metehan/Dropbox/RFML/Journal-revision/cfo_and_channel.tex",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/cfo_channel_training_matlab.py",
		"/Users/metehan/Dropbox/RFML/Journal-revision/architecture.tex",
		"/Users/metehan/Dropbox/RFML/Journal-revision/background_MC.tex",
		"/Users/metehan/Dropbox/RFML/Journal-revision/background.tex",
		"/Users/metehan/Dropbox/RFML/Journal-revision/main.tex",
		"/Users/metehan/Dropbox/RFML/Journal-revision/background_UM.tex",
		"/Users/metehan/Dropbox/RFML/Journal-revision/cfo.tex",
		"/Users/metehan/Dropbox/Adversarial papers/RFML paper/Journal-revision/background.tex",
		"/Users/metehan/Dropbox/Adversarial papers/RFML paper/Journal-revision/references.bib",
		"/Users/metehan/Dropbox/Adversarial papers/RFML paper/Journal-revision/appendix.tex",
		"/Users/metehan/Dropbox/Adversarial papers/RFML paper/Journal-revision/simulated_data.tex",
		"/Users/metehan/Dropbox/Adversarial papers/RFML paper/Journal-revision/preamble.tex",
		"/Users/metehan/Google Drive/RFML/Journal-revision/simulated_data.tex",
		"/Users/metehan/Google Drive/RFML/Journal-revision/main.tex",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/cxnn/models.py",
		"/Users/metehan/Desktop/Journal-revision/main.tex",
		"/Users/metehan/Desktop/Journal-revision/supp.tex",
		"/Users/metehan/Dropbox/RFML/Journal rebuttal/rebuttal_UM2.tex",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/tests/test_AT.py",
		"/Users/metehan/Desktop/adv/larger_trainset/src/train.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchdefenses/_adversarial_train.py",
		"/Users/metehan/Desktop/lab/deep_noise_rejection/CIFAR10/main.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchdefenses/amp/_adversarial_train.py",
		"/Users/metehan/Desktop/lab/deep-illusion/tests/test_all_attacks.sh",
		"/Users/metehan/Desktop/RFML/wifi-journal copy/wifi-fingerprinting-journal/cfo_channel_training_matlab.py",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/preproc/preproc_wifi.py",
		"/Users/metehan/Desktop/RFML/wifi-journal/wifi-fingerprinting-journal/cfo_channel_testing.py",
		"/Users/metehan/Desktop/oguz_hw/models.py",
		"/Users/metehan/Desktop/lab/deep_noise_rejection/MNIST/models/lenet_nr.py",
		"/Users/metehan/Desktop/lab/deep_noise_rejection/MNIST/models/tools.py",
		"/Users/metehan/Google Drive/github-repos/PyTorchTutorial/MNIST-fashion/models.py",
		"/Users/metehan/Desktop/adv/nips2020/src/loss_landscape.py",
		"/Users/metehan/Desktop/adv/nips2020/adversarial_framework/torchattacks/analysis/plot/_loss_landscape.py",
		"/Users/metehan/Desktop/adv/nips2020_submission/README.md",
		"/Users/metehan/Desktop/adv/nips2020/src/__init__.py",
		"/Users/metehan/Desktop/adv/nips2020/__init__.py",
		"/Users/metehan/Desktop/adv/nips2020/src/parameters.py",
		"/Users/metehan/Desktop/adv/nips2020/src/example_usage.txt",
		"/Users/metehan/Desktop/adv/nips2020/src/ensemble_plot.py",
		"/Users/metehan/Desktop/adv/nips2020/adversarial_framework/torchattacks/_pgd.py",
		"/Users/metehan/Desktop/adv/nips2020/src/train_test_functions.py",
		"/Users/metehan/Desktop/lab/deep-illusion/tests/test_loss_landscape.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/analysis/plot/_loss_landscape.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/_fgsm.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/_pgd.py",
		"/Users/metehan/Desktop/lab/deep-illusion/tests/test_AT.py",
		"/Users/metehan/Desktop/lab/deep-illusion/tests/test_attacks.py",
		"/Users/metehan/Desktop/lab/deep-illusion/tests/test_utils.py",
		"/Users/metehan/Desktop/RFML/wifi/scripts/tests/plotter_accuracy.py",
		"/Users/metehan/Desktop/lab/deep-illusion/tests/test_all_defenses.sh",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/torchattacks/analysis/plot/_plot_settings.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/__init__.py",
		"/Users/metehan/Google Drive/github-repos/deep-illusion/deepillusion/_version.py",
		"/Users/metehan/Desktop/lab/deep-illusion/deepillusion/torchattacks/analysis/__init__.py"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 103.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 31.0
	},
	"output.autopep8":
	{
		"height": 103.0
	},
	"output.exec":
	{
		"height": 109.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.latextools":
	{
		"height": 180.0
	},
	"output.markdown":
	{
		"height": 103.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.sftp":
	{
		"height": 37.0
	},
	"pinned_build_system": "Packages/LaTeXTools/LaTeX.sublime-build",
	"project": "pytorch-tutorials.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 199.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
